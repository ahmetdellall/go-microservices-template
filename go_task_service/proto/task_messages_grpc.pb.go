// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: go_task_service/proto/task_messages.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoTaskServiceClient is the client API for GoTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoTaskServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskRes, error)
	UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskRes, error)
	GetTaskById(ctx context.Context, in *GetTaskByIdReq, opts ...grpc.CallOption) (*GetTaskByIdRes, error)
}

type goTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoTaskServiceClient(cc grpc.ClientConnInterface) GoTaskServiceClient {
	return &goTaskServiceClient{cc}
}

func (c *goTaskServiceClient) CreateTask(ctx context.Context, in *CreateTaskReq, opts ...grpc.CallOption) (*CreateTaskRes, error) {
	out := new(CreateTaskRes)
	err := c.cc.Invoke(ctx, "/goTaskService.goTaskService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goTaskServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskReq, opts ...grpc.CallOption) (*UpdateTaskRes, error) {
	out := new(UpdateTaskRes)
	err := c.cc.Invoke(ctx, "/goTaskService.goTaskService/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goTaskServiceClient) GetTaskById(ctx context.Context, in *GetTaskByIdReq, opts ...grpc.CallOption) (*GetTaskByIdRes, error) {
	out := new(GetTaskByIdRes)
	err := c.cc.Invoke(ctx, "/goTaskService.goTaskService/GetTaskById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoTaskServiceServer is the server API for GoTaskService service.
// All implementations must embed UnimplementedGoTaskServiceServer
// for forward compatibility
type GoTaskServiceServer interface {
	CreateTask(context.Context, *CreateTaskReq) (*CreateTaskRes, error)
	UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskRes, error)
	GetTaskById(context.Context, *GetTaskByIdReq) (*GetTaskByIdRes, error)
	mustEmbedUnimplementedGoTaskServiceServer()
}

// UnimplementedGoTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoTaskServiceServer struct {
}

func (UnimplementedGoTaskServiceServer) CreateTask(context.Context, *CreateTaskReq) (*CreateTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedGoTaskServiceServer) UpdateTask(context.Context, *UpdateTaskReq) (*UpdateTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedGoTaskServiceServer) GetTaskById(context.Context, *GetTaskByIdReq) (*GetTaskByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (UnimplementedGoTaskServiceServer) mustEmbedUnimplementedGoTaskServiceServer() {}

// UnsafeGoTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoTaskServiceServer will
// result in compilation errors.
type UnsafeGoTaskServiceServer interface {
	mustEmbedUnimplementedGoTaskServiceServer()
}

func RegisterGoTaskServiceServer(s grpc.ServiceRegistrar, srv GoTaskServiceServer) {
	s.RegisterService(&GoTaskService_ServiceDesc, srv)
}

func _GoTaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoTaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goTaskService.goTaskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoTaskServiceServer).CreateTask(ctx, req.(*CreateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoTaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoTaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goTaskService.goTaskService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoTaskServiceServer).UpdateTask(ctx, req.(*UpdateTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoTaskService_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoTaskServiceServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goTaskService.goTaskService/GetTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoTaskServiceServer).GetTaskById(ctx, req.(*GetTaskByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GoTaskService_ServiceDesc is the grpc.ServiceDesc for GoTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goTaskService.goTaskService",
	HandlerType: (*GoTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _GoTaskService_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _GoTaskService_UpdateTask_Handler,
		},
		{
			MethodName: "GetTaskById",
			Handler:    _GoTaskService_GetTaskById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_task_service/proto/task_messages.proto",
}
