// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: proto/kafka/kafka.proto

package kafka

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID           string                 `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Title            string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	TaskKey          string                 `protobuf:"bytes,3,opt,name=TaskKey,proto3" json:"TaskKey,omitempty"`
	Details          string                 `protobuf:"bytes,4,opt,name=Details,proto3" json:"Details,omitempty"`
	ExpectedDateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ExpectedDateTime,proto3" json:"ExpectedDateTime,omitempty"`
	Status           int32                  `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`
	CreatorID        string                 `protobuf:"bytes,7,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	CreatedDate      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=CreatedDate,proto3" json:"CreatedDate,omitempty"`
	UpdatedDate      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=UpdatedDate,proto3" json:"UpdatedDate,omitempty"`
	StartDateTime    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
	EndDateTime      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=EndDateTime,proto3" json:"EndDateTime,omitempty"`
	CategoryID       string                 `protobuf:"bytes,12,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kafka_kafka_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_kafka_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_proto_kafka_kafka_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *Task) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Task) GetTaskKey() string {
	if x != nil {
		return x.TaskKey
	}
	return ""
}

func (x *Task) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *Task) GetExpectedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedDateTime
	}
	return nil
}

func (x *Task) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Task) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *Task) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *Task) GetUpdatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedDate
	}
	return nil
}

func (x *Task) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

func (x *Task) GetEndDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDateTime
	}
	return nil
}

func (x *Task) GetCategoryID() string {
	if x != nil {
		return x.CategoryID
	}
	return ""
}

type TaskCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID           string                 `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Title            string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	TaskKey          string                 `protobuf:"bytes,3,opt,name=TaskKey,proto3" json:"TaskKey,omitempty"`
	Details          string                 `protobuf:"bytes,4,opt,name=Details,proto3" json:"Details,omitempty"`
	ExpectedDateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ExpectedDateTime,proto3" json:"ExpectedDateTime,omitempty"`
	Status           int32                  `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`
	CreatorID        string                 `protobuf:"bytes,7,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	CategoryID       string                 `protobuf:"bytes,8,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
	StartDateTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
	EndDateTime      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=EndDateTime,proto3" json:"EndDateTime,omitempty"`
}

func (x *TaskCreate) Reset() {
	*x = TaskCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kafka_kafka_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreate) ProtoMessage() {}

func (x *TaskCreate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_kafka_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreate.ProtoReflect.Descriptor instead.
func (*TaskCreate) Descriptor() ([]byte, []int) {
	return file_proto_kafka_kafka_proto_rawDescGZIP(), []int{1}
}

func (x *TaskCreate) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskCreate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskCreate) GetTaskKey() string {
	if x != nil {
		return x.TaskKey
	}
	return ""
}

func (x *TaskCreate) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *TaskCreate) GetExpectedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedDateTime
	}
	return nil
}

func (x *TaskCreate) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskCreate) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TaskCreate) GetCategoryID() string {
	if x != nil {
		return x.CategoryID
	}
	return ""
}

func (x *TaskCreate) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

func (x *TaskCreate) GetEndDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDateTime
	}
	return nil
}

type TaskUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID           string                 `protobuf:"bytes,1,opt,name=TaskID,proto3" json:"TaskID,omitempty"`
	Title            string                 `protobuf:"bytes,2,opt,name=Title,proto3" json:"Title,omitempty"`
	TaskKey          string                 `protobuf:"bytes,3,opt,name=TaskKey,proto3" json:"TaskKey,omitempty"`
	Details          string                 `protobuf:"bytes,4,opt,name=Details,proto3" json:"Details,omitempty"`
	ExpectedDateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ExpectedDateTime,proto3" json:"ExpectedDateTime,omitempty"`
	Status           int32                  `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`
	CreatorID        string                 `protobuf:"bytes,7,opt,name=CreatorID,proto3" json:"CreatorID,omitempty"`
	CategoryID       string                 `protobuf:"bytes,8,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
	StartDateTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
	EndDateTime      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=EndDateTime,proto3" json:"EndDateTime,omitempty"`
}

func (x *TaskUpdate) Reset() {
	*x = TaskUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kafka_kafka_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdate) ProtoMessage() {}

func (x *TaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_kafka_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdate.ProtoReflect.Descriptor instead.
func (*TaskUpdate) Descriptor() ([]byte, []int) {
	return file_proto_kafka_kafka_proto_rawDescGZIP(), []int{2}
}

func (x *TaskUpdate) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *TaskUpdate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskUpdate) GetTaskKey() string {
	if x != nil {
		return x.TaskKey
	}
	return ""
}

func (x *TaskUpdate) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *TaskUpdate) GetExpectedDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedDateTime
	}
	return nil
}

func (x *TaskUpdate) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TaskUpdate) GetCreatorID() string {
	if x != nil {
		return x.CreatorID
	}
	return ""
}

func (x *TaskUpdate) GetCategoryID() string {
	if x != nil {
		return x.CategoryID
	}
	return ""
}

func (x *TaskUpdate) GetStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDateTime
	}
	return nil
}

func (x *TaskUpdate) GetEndDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDateTime
	}
	return nil
}

type TaskCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskCreated) Reset() {
	*x = TaskCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kafka_kafka_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreated) ProtoMessage() {}

func (x *TaskCreated) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_kafka_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreated.ProtoReflect.Descriptor instead.
func (*TaskCreated) Descriptor() ([]byte, []int) {
	return file_proto_kafka_kafka_proto_rawDescGZIP(), []int{3}
}

func (x *TaskCreated) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type TaskUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *TaskUpdated) Reset() {
	*x = TaskUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kafka_kafka_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskUpdated) ProtoMessage() {}

func (x *TaskUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_kafka_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskUpdated.ProtoReflect.Descriptor instead.
func (*TaskUpdated) Descriptor() ([]byte, []int) {
	return file_proto_kafka_kafka_proto_rawDescGZIP(), []int{4}
}

func (x *TaskUpdated) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type TaskDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *TaskDelete) Reset() {
	*x = TaskDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kafka_kafka_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDelete) ProtoMessage() {}

func (x *TaskDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_kafka_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDelete.ProtoReflect.Descriptor instead.
func (*TaskDelete) Descriptor() ([]byte, []int) {
	return file_proto_kafka_kafka_proto_rawDescGZIP(), []int{5}
}

func (x *TaskDelete) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type TaskDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
}

func (x *TaskDeleted) Reset() {
	*x = TaskDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_kafka_kafka_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDeleted) ProtoMessage() {}

func (x *TaskDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_proto_kafka_kafka_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDeleted.ProtoReflect.Descriptor instead.
func (*TaskDeleted) Descriptor() ([]byte, []int) {
	return file_proto_kafka_kafka_proto_rawDescGZIP(), []int{6}
}

func (x *TaskDeleted) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

var File_proto_kafka_kafka_proto protoreflect.FileDescriptor

var file_proto_kafka_kafka_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x2f, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x04, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x8c,
	0x03, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x61, 0x73, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61,
	0x73, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x46, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x40, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3c, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x03,
	0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61,
	0x73, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x73,
	0x6b, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x46,
	0x0a, 0x10, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x0b,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x61, 0x66, 0x6b,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x22, 0x36, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x24, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x22, 0x25, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2f, 0x3b,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_kafka_kafka_proto_rawDescOnce sync.Once
	file_proto_kafka_kafka_proto_rawDescData = file_proto_kafka_kafka_proto_rawDesc
)

func file_proto_kafka_kafka_proto_rawDescGZIP() []byte {
	file_proto_kafka_kafka_proto_rawDescOnce.Do(func() {
		file_proto_kafka_kafka_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_kafka_kafka_proto_rawDescData)
	})
	return file_proto_kafka_kafka_proto_rawDescData
}

var file_proto_kafka_kafka_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_kafka_kafka_proto_goTypes = []interface{}{
	(*Task)(nil),                  // 0: kafkaMessages.Task
	(*TaskCreate)(nil),            // 1: kafkaMessages.TaskCreate
	(*TaskUpdate)(nil),            // 2: kafkaMessages.TaskUpdate
	(*TaskCreated)(nil),           // 3: kafkaMessages.TaskCreated
	(*TaskUpdated)(nil),           // 4: kafkaMessages.TaskUpdated
	(*TaskDelete)(nil),            // 5: kafkaMessages.TaskDelete
	(*TaskDeleted)(nil),           // 6: kafkaMessages.TaskDeleted
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_proto_kafka_kafka_proto_depIdxs = []int32{
	7,  // 0: kafkaMessages.Task.ExpectedDateTime:type_name -> google.protobuf.Timestamp
	7,  // 1: kafkaMessages.Task.CreatedDate:type_name -> google.protobuf.Timestamp
	7,  // 2: kafkaMessages.Task.UpdatedDate:type_name -> google.protobuf.Timestamp
	7,  // 3: kafkaMessages.Task.StartDateTime:type_name -> google.protobuf.Timestamp
	7,  // 4: kafkaMessages.Task.EndDateTime:type_name -> google.protobuf.Timestamp
	7,  // 5: kafkaMessages.TaskCreate.ExpectedDateTime:type_name -> google.protobuf.Timestamp
	7,  // 6: kafkaMessages.TaskCreate.StartDateTime:type_name -> google.protobuf.Timestamp
	7,  // 7: kafkaMessages.TaskCreate.EndDateTime:type_name -> google.protobuf.Timestamp
	7,  // 8: kafkaMessages.TaskUpdate.ExpectedDateTime:type_name -> google.protobuf.Timestamp
	7,  // 9: kafkaMessages.TaskUpdate.StartDateTime:type_name -> google.protobuf.Timestamp
	7,  // 10: kafkaMessages.TaskUpdate.EndDateTime:type_name -> google.protobuf.Timestamp
	0,  // 11: kafkaMessages.TaskCreated.task:type_name -> kafkaMessages.Task
	0,  // 12: kafkaMessages.TaskUpdated.task:type_name -> kafkaMessages.Task
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_kafka_kafka_proto_init() }
func file_proto_kafka_kafka_proto_init() {
	if File_proto_kafka_kafka_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_kafka_kafka_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kafka_kafka_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kafka_kafka_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kafka_kafka_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kafka_kafka_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kafka_kafka_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_kafka_kafka_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_kafka_kafka_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_kafka_kafka_proto_goTypes,
		DependencyIndexes: file_proto_kafka_kafka_proto_depIdxs,
		MessageInfos:      file_proto_kafka_kafka_proto_msgTypes,
	}.Build()
	File_proto_kafka_kafka_proto = out.File
	file_proto_kafka_kafka_proto_rawDesc = nil
	file_proto_kafka_kafka_proto_goTypes = nil
	file_proto_kafka_kafka_proto_depIdxs = nil
}
